// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package internal

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	DetectManifests(ctx context.Context, in *ProjectLocation, opts ...grpc.CallOption) (Agent_DetectManifestsClient, error)
	ProcessManifest(ctx context.Context, in *ProcessingRequest, opts ...grpc.CallOption) (*BomLocation, error)
	RetrieveReleaseHistory(ctx context.Context, in *Package, opts ...grpc.CallOption) (Agent_RetrieveReleaseHistoryClient, error)
	GetValidatingPackages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Agent_GetValidatingPackagesClient, error)
	GetValidatingRepositories(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Agent_GetValidatingRepositoriesClient, error)
	Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) DetectManifests(ctx context.Context, in *ProjectLocation, opts ...grpc.CallOption) (Agent_DetectManifestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/com.corgibytes.freshli.agent.Agent/DetectManifests", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentDetectManifestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_DetectManifestsClient interface {
	Recv() (*ManifestLocation, error)
	grpc.ClientStream
}

type agentDetectManifestsClient struct {
	grpc.ClientStream
}

func (x *agentDetectManifestsClient) Recv() (*ManifestLocation, error) {
	m := new(ManifestLocation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) ProcessManifest(ctx context.Context, in *ProcessingRequest, opts ...grpc.CallOption) (*BomLocation, error) {
	out := new(BomLocation)
	err := c.cc.Invoke(ctx, "/com.corgibytes.freshli.agent.Agent/ProcessManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) RetrieveReleaseHistory(ctx context.Context, in *Package, opts ...grpc.CallOption) (Agent_RetrieveReleaseHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], "/com.corgibytes.freshli.agent.Agent/RetrieveReleaseHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentRetrieveReleaseHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_RetrieveReleaseHistoryClient interface {
	Recv() (*PackageRelease, error)
	grpc.ClientStream
}

type agentRetrieveReleaseHistoryClient struct {
	grpc.ClientStream
}

func (x *agentRetrieveReleaseHistoryClient) Recv() (*PackageRelease, error) {
	m := new(PackageRelease)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) GetValidatingPackages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Agent_GetValidatingPackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[2], "/com.corgibytes.freshli.agent.Agent/GetValidatingPackages", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetValidatingPackagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetValidatingPackagesClient interface {
	Recv() (*Package, error)
	grpc.ClientStream
}

type agentGetValidatingPackagesClient struct {
	grpc.ClientStream
}

func (x *agentGetValidatingPackagesClient) Recv() (*Package, error) {
	m := new(Package)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) GetValidatingRepositories(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Agent_GetValidatingRepositoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[3], "/com.corgibytes.freshli.agent.Agent/GetValidatingRepositories", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetValidatingRepositoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetValidatingRepositoriesClient interface {
	Recv() (*RepositoryLocation, error)
	grpc.ClientStream
}

type agentGetValidatingRepositoriesClient struct {
	grpc.ClientStream
}

func (x *agentGetValidatingRepositoriesClient) Recv() (*RepositoryLocation, error) {
	m := new(RepositoryLocation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/com.corgibytes.freshli.agent.Agent/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	DetectManifests(*ProjectLocation, Agent_DetectManifestsServer) error
	ProcessManifest(context.Context, *ProcessingRequest) (*BomLocation, error)
	RetrieveReleaseHistory(*Package, Agent_RetrieveReleaseHistoryServer) error
	GetValidatingPackages(*empty.Empty, Agent_GetValidatingPackagesServer) error
	GetValidatingRepositories(*empty.Empty, Agent_GetValidatingRepositoriesServer) error
	Shutdown(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) DetectManifests(*ProjectLocation, Agent_DetectManifestsServer) error {
	return status.Errorf(codes.Unimplemented, "method DetectManifests not implemented")
}
func (UnimplementedAgentServer) ProcessManifest(context.Context, *ProcessingRequest) (*BomLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessManifest not implemented")
}
func (UnimplementedAgentServer) RetrieveReleaseHistory(*Package, Agent_RetrieveReleaseHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method RetrieveReleaseHistory not implemented")
}
func (UnimplementedAgentServer) GetValidatingPackages(*empty.Empty, Agent_GetValidatingPackagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetValidatingPackages not implemented")
}
func (UnimplementedAgentServer) GetValidatingRepositories(*empty.Empty, Agent_GetValidatingRepositoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetValidatingRepositories not implemented")
}
func (UnimplementedAgentServer) Shutdown(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_DetectManifests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectLocation)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).DetectManifests(m, &agentDetectManifestsServer{stream})
}

type Agent_DetectManifestsServer interface {
	Send(*ManifestLocation) error
	grpc.ServerStream
}

type agentDetectManifestsServer struct {
	grpc.ServerStream
}

func (x *agentDetectManifestsServer) Send(m *ManifestLocation) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_ProcessManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ProcessManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.corgibytes.freshli.agent.Agent/ProcessManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ProcessManifest(ctx, req.(*ProcessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_RetrieveReleaseHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Package)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).RetrieveReleaseHistory(m, &agentRetrieveReleaseHistoryServer{stream})
}

type Agent_RetrieveReleaseHistoryServer interface {
	Send(*PackageRelease) error
	grpc.ServerStream
}

type agentRetrieveReleaseHistoryServer struct {
	grpc.ServerStream
}

func (x *agentRetrieveReleaseHistoryServer) Send(m *PackageRelease) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_GetValidatingPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetValidatingPackages(m, &agentGetValidatingPackagesServer{stream})
}

type Agent_GetValidatingPackagesServer interface {
	Send(*Package) error
	grpc.ServerStream
}

type agentGetValidatingPackagesServer struct {
	grpc.ServerStream
}

func (x *agentGetValidatingPackagesServer) Send(m *Package) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_GetValidatingRepositories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetValidatingRepositories(m, &agentGetValidatingRepositoriesServer{stream})
}

type Agent_GetValidatingRepositoriesServer interface {
	Send(*RepositoryLocation) error
	grpc.ServerStream
}

type agentGetValidatingRepositoriesServer struct {
	grpc.ServerStream
}

func (x *agentGetValidatingRepositoriesServer) Send(m *RepositoryLocation) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.corgibytes.freshli.agent.Agent/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Shutdown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.corgibytes.freshli.agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessManifest",
			Handler:    _Agent_ProcessManifest_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Agent_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DetectManifests",
			Handler:       _Agent_DetectManifests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RetrieveReleaseHistory",
			Handler:       _Agent_RetrieveReleaseHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetValidatingPackages",
			Handler:       _Agent_GetValidatingPackages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetValidatingRepositories",
			Handler:       _Agent_GetValidatingRepositories_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "freshli_agent.proto",
}
